<?php

require_once dirname(__FILE__) . '/../../util/Vetor.php';

include "/../../util/Colecao";

/**
 * Test class for Vetor.
 * Generated by PHPUnit on 2013-06-21 at 09:23:26.
 */
class VetorTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Vetor
     */
    protected $vetor;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->vetor = new Vetor;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Vetor::adicionarNoFinal
     * @todo Implement testeAdicionarElementosNoFinal().
     */
    public function testeAdicionarElementosNoFinal() {
        // Remove the following lines when you implement this test.
        $elementoUm = 10;
        $elementoDois = 20;
        $elementoTres = 30;
        
        $this->AssertEquals(false, $this->vetor->contemElemento($elementoUm));
        $this->AssertEquals(false, $this->vetor->contemElemento($elementoDois));
        $this->AssertEquals(false, $this->vetor->contemElemento($elementoTres));
        
        $this->vetor->adicionarNoFinal($elementoUm);
        $this->vetor->adicionarNoFinal($elementoDois);
        $this->vetor->adicionarNoFinal($elementoTres);
        
        $this->AssertEquals($elementoUm, $this->vetor->get(0));
        $this->AssertEquals($elementoDois, $this->vetor->get(1));
        $this->AssertEquals($elementoTres, $this->vetor->get(2));
        
        $this->AssertEquals(true, $this->vetor->contemElemento($elementoUm));
        $this->AssertEquals(true, $this->vetor->contemElemento($elementoDois));
        $this->AssertEquals(true, $this->vetor->contemElemento($elementoTres));
    }
    
    /**
     * @covers Vetor::adicionarNoInicio
     * @todo Implement testeAdicionarElementosNoInicio().
     */
    public function testeAdicionarElementosNoInicio() {
        // Remove the following lines when you implement this test.
        $elementoUm = 10;
        $elementoDois = 20;
        $elementoTres = 30;
        
        $this->vetor->adicionarNoInicio($elementoUm);
        $this->vetor->adicionarNoInicio($elementoDois);
        $this->vetor->adicionarNoInicio($elementoTres);
        
        $this->AssertEquals($elementoTres, $this->vetor->get(0));
        $this->AssertEquals($elementoDois, $this->vetor->get(1));
        $this->AssertEquals($elementoUm, $this->vetor->get(2));
    }
    
    /**
     * @covers Vetor::adicionar
     * @todo Implement testeAdicionarElementos().
     */
    public function testeAdicionarElementos() {
        // Remove the following lines when you implement this test.
        $elementoUm = 10;
        $elementoDois = 20;
        $elementoTres = 30;
        
        $this->vetor->adicionar($elementoTres, 0);
        $this->vetor->adicionar($elementoUm, 0);
        $this->vetor->adicionar($elementoDois, 1);
        
        $this->AssertEquals($elementoUm, $this->vetor->get(0));
        $this->AssertEquals($elementoDois, $this->vetor->get(1));
        $this->AssertEquals($elementoTres, $this->vetor->get(2));
    }
    
    /**
     * @covers Vetor::remover
     * @todo Implement testeRemoverElementos().
     */
    public function testeRemoverElementos() {
        // Remove the following lines when you implement this test.
        $elementoUm = 10;
        $elementoDois = 20;
        $elementoTres = 30;
        
        $this->vetor->adicionar($elementoTres, 0);
        $this->vetor->adicionar($elementoUm, 0);
        $this->vetor->adicionar($elementoDois, 1);
        
        $this->vetor->remover(1);
        $this->AssertEquals($elementoTres, $this->vetor->get(1));
        
        $this->vetor->remover(0);
        $this->AssertEquals($elementoTres, $this->vetor->get(0));
    }
    
    /**
     * @covers Vetor::set
     * @todo Implement testeRemoverElementos().
     */
    public function testeSetarElementos() {
        // Remove the following lines when you implement this test.
        $elementoUm = 10;
        $elementoDois = 20;
        $elementoTres = 30;
        
        $this->vetor->adicionar($elementoTres, 0);
        $this->vetor->adicionar($elementoUm, 0);
        $this->vetor->adicionar($elementoDois, 1);
        
        $this->vetor->set(0, $elementoUm);
        $this->vetor->set(1, $elementoDois);
        $this->vetor->set(2, $elementoTres);
        
        $this->AssertEquals($elementoUm, $this->vetor->get(0));
        $this->AssertEquals($elementoDois, $this->vetor->get(1));
        $this->AssertEquals($elementoTres, $this->vetor->get(2));
        
    }

}

?>
